.\" Manpage for _printf.
.\" Contact Tofer - 3411@holbertonschool.com -- to correct errors or typos.
.\" Contact Tres - 3319@holbertonschool.com -- to correct errors or typos.
.TH man 3 04 Aug 2021 1.0 _printf man page
.SH NAME
    _printf \- prints to standard out
.SH SYNOPSIS
Standard Libraies used for function operations 	
>P	#include <limits.h>
    #include <stdlib.h>
    #include <stdio.h>

    #include <stdarg.h>
	using va_list,va_start, va_arg, and va_end 
		int _printf(const char * const format, ...);

 void flag_set(const char *, flag_list *, int *);
 void (*get_funky(char s))(va_list *, int *, flag_list *);
 void flag_set(const char *, flag_list *, int *);
 void flags_reset(flag_list *);
 void (*get_funky(char s))(va_list *, int *, flag_list *);

    #include <unistd.h>
 	int _putchar(char c);
	 	writes the character c to stdout

    #include "holberton.h"
     print functions called by _prinf
		void p_b(va_list *, int *, flag_list *);
		void p_c(va_list *, int *, flag_list *);
		void p_di(va_list *, int *, flag_list *);
		void p_o(va_list *, int *, flag_list *);
		void p_p(va_list *, int *, flag_list *);
		void p_s(va_list *, int *, flag_list *);
		void p_u(va_list *, int *, flag_list *);
		void p_Xx(va_list *, int *, flag_list *);
.SH DESCRIPTION
_printf = program that prints to terminal from input enter by user with the following specifiers


.SH OPTIONS
.P _printf takes the following specifiers with corasponding funk call;
	{"b", p_b}, print unsigned base10 as base2
	{"c", p_c}, print char
	{"d", p_di}, print integer
	{"i", p_di}, print integer
	{"o", p_o}, print number in Base8, Octal
	{"%", p_p}, print %
	{"s", p_s}, print string
	{"u", p_u}, print unsigned integer in Base10
	{"x", p_Xx}, print value in Base16, hexidecimal
	{"X", p_Xx} print value in Base16, hexidecimal
.SH FLAGS
.P _prinf takes the folloing modifers to specifiers

    
		Spec:  d ,i          u, o, x, X
	flagz.h =  short int  |	unsigned short int
	flagz.l = long int    |  long int
	
	Then set with the following funk:
	void flag_set(const char *c, flag_list *flagz, int *i)	
	void flag_set(const char *, flag_list *, int *);
	void flag_set(const char *, flag_list *, int *);

	Then flags are reset:
	void flags_reset(flag_list *);

	void (*get_funky(char s))(va_list *, int *, flag_list *);
.SH BUGS
.P No known bugs.

.SH AUTHOR
Tofer Sokolosky 3411@holbertonschool.com
Tres Serio 3319@holbertonschool.com